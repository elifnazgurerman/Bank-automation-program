#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BLM210_ProgramlamaLaboratuvari2_Proje3.SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BankDB")]
	public partial class BankDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContactInfoList(ContactInfoList instance);
    partial void UpdateContactInfoList(ContactInfoList instance);
    partial void DeleteContactInfoList(ContactInfoList instance);
    partial void InsertCurrencyList(CurrencyList instance);
    partial void UpdateCurrencyList(CurrencyList instance);
    partial void DeleteCurrencyList(CurrencyList instance);
    partial void InsertCustomerSharingList(CustomerSharingList instance);
    partial void UpdateCustomerSharingList(CustomerSharingList instance);
    partial void DeleteCustomerSharingList(CustomerSharingList instance);
    partial void InsertDate(Date instance);
    partial void UpdateDate(Date instance);
    partial void DeleteDate(Date instance);
    partial void InsertInterestRate(InterestRate instance);
    partial void UpdateInterestRate(InterestRate instance);
    partial void DeleteInterestRate(InterestRate instance);
    partial void InsertLoanInstallmentList(LoanInstallmentList instance);
    partial void UpdateLoanInstallmentList(LoanInstallmentList instance);
    partial void DeleteLoanInstallmentList(LoanInstallmentList instance);
    partial void InsertLoanList(LoanList instance);
    partial void UpdateLoanList(LoanList instance);
    partial void DeleteLoanList(LoanList instance);
    partial void InsertProcessList(ProcessList instance);
    partial void UpdateProcessList(ProcessList instance);
    partial void DeleteProcessList(ProcessList instance);
    partial void InsertProcessTypeList(ProcessTypeList instance);
    partial void UpdateProcessTypeList(ProcessTypeList instance);
    partial void DeleteProcessTypeList(ProcessTypeList instance);
    partial void InsertSalariesList(SalariesList instance);
    partial void UpdateSalariesList(SalariesList instance);
    partial void DeleteSalariesList(SalariesList instance);
    partial void InsertUserList(UserList instance);
    partial void UpdateUserList(UserList instance);
    partial void DeleteUserList(UserList instance);
    partial void InsertUserTypeList(UserTypeList instance);
    partial void UpdateUserTypeList(UserTypeList instance);
    partial void DeleteUserTypeList(UserTypeList instance);
    partial void InsertWalletList(WalletList instance);
    partial void UpdateWalletList(WalletList instance);
    partial void DeleteWalletList(WalletList instance);
    #endregion
		
		public BankDBDataContext() : 
				base(global::BLM210_ProgramlamaLaboratuvari2_Proje3.Properties.Settings.Default.BankDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BankDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BankDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BankDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BankDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ContactInfoList> ContactInfoLists
		{
			get
			{
				return this.GetTable<ContactInfoList>();
			}
		}
		
		public System.Data.Linq.Table<CurrencyList> CurrencyLists
		{
			get
			{
				return this.GetTable<CurrencyList>();
			}
		}
		
		public System.Data.Linq.Table<CustomerSharingList> CustomerSharingLists
		{
			get
			{
				return this.GetTable<CustomerSharingList>();
			}
		}
		
		public System.Data.Linq.Table<Date> Dates
		{
			get
			{
				return this.GetTable<Date>();
			}
		}
		
		public System.Data.Linq.Table<InterestRate> InterestRates
		{
			get
			{
				return this.GetTable<InterestRate>();
			}
		}
		
		public System.Data.Linq.Table<LoanInstallmentList> LoanInstallmentLists
		{
			get
			{
				return this.GetTable<LoanInstallmentList>();
			}
		}
		
		public System.Data.Linq.Table<LoanList> LoanLists
		{
			get
			{
				return this.GetTable<LoanList>();
			}
		}
		
		public System.Data.Linq.Table<ProcessList> ProcessLists
		{
			get
			{
				return this.GetTable<ProcessList>();
			}
		}
		
		public System.Data.Linq.Table<ProcessTypeList> ProcessTypeLists
		{
			get
			{
				return this.GetTable<ProcessTypeList>();
			}
		}
		
		public System.Data.Linq.Table<SalariesList> SalariesLists
		{
			get
			{
				return this.GetTable<SalariesList>();
			}
		}
		
		public System.Data.Linq.Table<UserList> UserLists
		{
			get
			{
				return this.GetTable<UserList>();
			}
		}
		
		public System.Data.Linq.Table<UserTypeList> UserTypeLists
		{
			get
			{
				return this.GetTable<UserTypeList>();
			}
		}
		
		public System.Data.Linq.Table<WalletList> WalletLists
		{
			get
			{
				return this.GetTable<WalletList>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactInfoList")]
	public partial class ContactInfoList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _adress;
		
		private string _phone;
		
		private EntityRef<UserList> _UserList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnadressChanging(string value);
    partial void OnadressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    #endregion
		
		public ContactInfoList()
		{
			this._UserList = default(EntityRef<UserList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._UserList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adress", DbType="NVarChar(250)")]
		public string adress
		{
			get
			{
				return this._adress;
			}
			set
			{
				if ((this._adress != value))
				{
					this.OnadressChanging(value);
					this.SendPropertyChanging();
					this._adress = value;
					this.SendPropertyChanged("adress");
					this.OnadressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(50)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_ContactInfoList", Storage="_UserList", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public UserList UserList
		{
			get
			{
				return this._UserList.Entity;
			}
			set
			{
				UserList previousValue = this._UserList.Entity;
				if (((previousValue != value) 
							|| (this._UserList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserList.Entity = null;
						previousValue.ContactInfoList = null;
					}
					this._UserList.Entity = value;
					if ((value != null))
					{
						value.ContactInfoList = this;
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("UserList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrencyList")]
	public partial class CurrencyList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _currency_id;
		
		private string _currency_name;
		
		private string _currency_shortname;
		
		private double _exchange_rate;
		
		private EntitySet<WalletList> _WalletLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncurrency_idChanging(int value);
    partial void Oncurrency_idChanged();
    partial void Oncurrency_nameChanging(string value);
    partial void Oncurrency_nameChanged();
    partial void Oncurrency_shortnameChanging(string value);
    partial void Oncurrency_shortnameChanged();
    partial void Onexchange_rateChanging(double value);
    partial void Onexchange_rateChanged();
    #endregion
		
		public CurrencyList()
		{
			this._WalletLists = new EntitySet<WalletList>(new Action<WalletList>(this.attach_WalletLists), new Action<WalletList>(this.detach_WalletLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currency_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int currency_id
		{
			get
			{
				return this._currency_id;
			}
			set
			{
				if ((this._currency_id != value))
				{
					this.Oncurrency_idChanging(value);
					this.SendPropertyChanging();
					this._currency_id = value;
					this.SendPropertyChanged("currency_id");
					this.Oncurrency_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currency_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string currency_name
		{
			get
			{
				return this._currency_name;
			}
			set
			{
				if ((this._currency_name != value))
				{
					this.Oncurrency_nameChanging(value);
					this.SendPropertyChanging();
					this._currency_name = value;
					this.SendPropertyChanged("currency_name");
					this.Oncurrency_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currency_shortname", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string currency_shortname
		{
			get
			{
				return this._currency_shortname;
			}
			set
			{
				if ((this._currency_shortname != value))
				{
					this.Oncurrency_shortnameChanging(value);
					this.SendPropertyChanging();
					this._currency_shortname = value;
					this.SendPropertyChanged("currency_shortname");
					this.Oncurrency_shortnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exchange_rate", DbType="Float NOT NULL")]
		public double exchange_rate
		{
			get
			{
				return this._exchange_rate;
			}
			set
			{
				if ((this._exchange_rate != value))
				{
					this.Onexchange_rateChanging(value);
					this.SendPropertyChanging();
					this._exchange_rate = value;
					this.SendPropertyChanged("exchange_rate");
					this.Onexchange_rateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrencyList_WalletList", Storage="_WalletLists", ThisKey="currency_id", OtherKey="currency_id")]
		public EntitySet<WalletList> WalletLists
		{
			get
			{
				return this._WalletLists;
			}
			set
			{
				this._WalletLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WalletLists(WalletList entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyList = this;
		}
		
		private void detach_WalletLists(WalletList entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerSharingList")]
	public partial class CustomerSharingList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _representer_id;
		
		private int _customer_id;
		
		private EntityRef<UserList> _UserList;
		
		private EntityRef<UserList> _UserList1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrepresenter_idChanging(int value);
    partial void Onrepresenter_idChanged();
    partial void Oncustomer_idChanging(int value);
    partial void Oncustomer_idChanged();
    #endregion
		
		public CustomerSharingList()
		{
			this._UserList = default(EntityRef<UserList>);
			this._UserList1 = default(EntityRef<UserList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_representer_id", DbType="Int NOT NULL")]
		public int representer_id
		{
			get
			{
				return this._representer_id;
			}
			set
			{
				if ((this._representer_id != value))
				{
					if (this._UserList1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrepresenter_idChanging(value);
					this.SendPropertyChanging();
					this._representer_id = value;
					this.SendPropertyChanged("representer_id");
					this.Onrepresenter_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int customer_id
		{
			get
			{
				return this._customer_id;
			}
			set
			{
				if ((this._customer_id != value))
				{
					if (this._UserList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncustomer_idChanging(value);
					this.SendPropertyChanging();
					this._customer_id = value;
					this.SendPropertyChanged("customer_id");
					this.Oncustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_CustomerSharingList", Storage="_UserList", ThisKey="customer_id", OtherKey="user_id", IsForeignKey=true)]
		public UserList UserList
		{
			get
			{
				return this._UserList.Entity;
			}
			set
			{
				UserList previousValue = this._UserList.Entity;
				if (((previousValue != value) 
							|| (this._UserList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserList.Entity = null;
						previousValue.CustomerSharingList = null;
					}
					this._UserList.Entity = value;
					if ((value != null))
					{
						value.CustomerSharingList = this;
						this._customer_id = value.user_id;
					}
					else
					{
						this._customer_id = default(int);
					}
					this.SendPropertyChanged("UserList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_CustomerSharingList1", Storage="_UserList1", ThisKey="representer_id", OtherKey="user_id", IsForeignKey=true)]
		public UserList UserList1
		{
			get
			{
				return this._UserList1.Entity;
			}
			set
			{
				UserList previousValue = this._UserList1.Entity;
				if (((previousValue != value) 
							|| (this._UserList1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserList1.Entity = null;
						previousValue.CustomerSharingLists.Remove(this);
					}
					this._UserList1.Entity = value;
					if ((value != null))
					{
						value.CustomerSharingLists.Add(this);
						this._representer_id = value.user_id;
					}
					else
					{
						this._representer_id = default(int);
					}
					this.SendPropertyChanged("UserList1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Date")]
	public partial class Date : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _currentDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncurrentDateChanging(System.DateTime value);
    partial void OncurrentDateChanged();
    #endregion
		
		public Date()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentDate", DbType="Date NOT NULL")]
		public System.DateTime currentDate
		{
			get
			{
				return this._currentDate;
			}
			set
			{
				if ((this._currentDate != value))
				{
					this.OncurrentDateChanging(value);
					this.SendPropertyChanging();
					this._currentDate = value;
					this.SendPropertyChanged("currentDate");
					this.OncurrentDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InterestRate")]
	public partial class InterestRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private decimal _default_interest_rate;
		
		private decimal _delayed_interest_rate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondefault_interest_rateChanging(decimal value);
    partial void Ondefault_interest_rateChanged();
    partial void Ondelayed_interest_rateChanging(decimal value);
    partial void Ondelayed_interest_rateChanged();
    #endregion
		
		public InterestRate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_default_interest_rate", DbType="Money NOT NULL")]
		public decimal default_interest_rate
		{
			get
			{
				return this._default_interest_rate;
			}
			set
			{
				if ((this._default_interest_rate != value))
				{
					this.Ondefault_interest_rateChanging(value);
					this.SendPropertyChanging();
					this._default_interest_rate = value;
					this.SendPropertyChanged("default_interest_rate");
					this.Ondefault_interest_rateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_delayed_interest_rate", DbType="Money NOT NULL")]
		public decimal delayed_interest_rate
		{
			get
			{
				return this._delayed_interest_rate;
			}
			set
			{
				if ((this._delayed_interest_rate != value))
				{
					this.Ondelayed_interest_rateChanging(value);
					this.SendPropertyChanging();
					this._delayed_interest_rate = value;
					this.SendPropertyChanged("delayed_interest_rate");
					this.Ondelayed_interest_rateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoanInstallmentList")]
	public partial class LoanInstallmentList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _installment_id;
		
		private int _loan_id;
		
		private decimal _amount;
		
		private System.DateTime _payday;
		
		private EntityRef<LoanList> _LoanList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oninstallment_idChanging(int value);
    partial void Oninstallment_idChanged();
    partial void Onloan_idChanging(int value);
    partial void Onloan_idChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    partial void OnpaydayChanging(System.DateTime value);
    partial void OnpaydayChanged();
    #endregion
		
		public LoanInstallmentList()
		{
			this._LoanList = default(EntityRef<LoanList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_installment_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int installment_id
		{
			get
			{
				return this._installment_id;
			}
			set
			{
				if ((this._installment_id != value))
				{
					this.Oninstallment_idChanging(value);
					this.SendPropertyChanging();
					this._installment_id = value;
					this.SendPropertyChanged("installment_id");
					this.Oninstallment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loan_id", DbType="Int NOT NULL")]
		public int loan_id
		{
			get
			{
				return this._loan_id;
			}
			set
			{
				if ((this._loan_id != value))
				{
					if (this._LoanList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onloan_idChanging(value);
					this.SendPropertyChanging();
					this._loan_id = value;
					this.SendPropertyChanged("loan_id");
					this.Onloan_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Money NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payday", DbType="Date NOT NULL")]
		public System.DateTime payday
		{
			get
			{
				return this._payday;
			}
			set
			{
				if ((this._payday != value))
				{
					this.OnpaydayChanging(value);
					this.SendPropertyChanging();
					this._payday = value;
					this.SendPropertyChanged("payday");
					this.OnpaydayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanList_LoanInstallmentList", Storage="_LoanList", ThisKey="loan_id", OtherKey="loan_id", IsForeignKey=true)]
		public LoanList LoanList
		{
			get
			{
				return this._LoanList.Entity;
			}
			set
			{
				LoanList previousValue = this._LoanList.Entity;
				if (((previousValue != value) 
							|| (this._LoanList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoanList.Entity = null;
						previousValue.LoanInstallmentLists.Remove(this);
					}
					this._LoanList.Entity = value;
					if ((value != null))
					{
						value.LoanInstallmentLists.Add(this);
						this._loan_id = value.loan_id;
					}
					else
					{
						this._loan_id = default(int);
					}
					this.SendPropertyChanged("LoanList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoanList")]
	public partial class LoanList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _loan_id;
		
		private int _user_id;
		
		private decimal _amount;
		
		private decimal _interest_rate;
		
		private decimal _delayed_interest_rate;
		
		private int _months_to_pay;
		
		private EntitySet<LoanInstallmentList> _LoanInstallmentLists;
		
		private EntityRef<UserList> _UserList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onloan_idChanging(int value);
    partial void Onloan_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    partial void Oninterest_rateChanging(decimal value);
    partial void Oninterest_rateChanged();
    partial void Ondelayed_interest_rateChanging(decimal value);
    partial void Ondelayed_interest_rateChanged();
    partial void Onmonths_to_payChanging(int value);
    partial void Onmonths_to_payChanged();
    #endregion
		
		public LoanList()
		{
			this._LoanInstallmentLists = new EntitySet<LoanInstallmentList>(new Action<LoanInstallmentList>(this.attach_LoanInstallmentLists), new Action<LoanInstallmentList>(this.detach_LoanInstallmentLists));
			this._UserList = default(EntityRef<UserList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loan_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int loan_id
		{
			get
			{
				return this._loan_id;
			}
			set
			{
				if ((this._loan_id != value))
				{
					this.Onloan_idChanging(value);
					this.SendPropertyChanging();
					this._loan_id = value;
					this.SendPropertyChanged("loan_id");
					this.Onloan_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._UserList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Money NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interest_rate", DbType="Money NOT NULL")]
		public decimal interest_rate
		{
			get
			{
				return this._interest_rate;
			}
			set
			{
				if ((this._interest_rate != value))
				{
					this.Oninterest_rateChanging(value);
					this.SendPropertyChanging();
					this._interest_rate = value;
					this.SendPropertyChanged("interest_rate");
					this.Oninterest_rateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_delayed_interest_rate", DbType="Money NOT NULL")]
		public decimal delayed_interest_rate
		{
			get
			{
				return this._delayed_interest_rate;
			}
			set
			{
				if ((this._delayed_interest_rate != value))
				{
					this.Ondelayed_interest_rateChanging(value);
					this.SendPropertyChanging();
					this._delayed_interest_rate = value;
					this.SendPropertyChanged("delayed_interest_rate");
					this.Ondelayed_interest_rateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_months_to_pay", DbType="Int NOT NULL")]
		public int months_to_pay
		{
			get
			{
				return this._months_to_pay;
			}
			set
			{
				if ((this._months_to_pay != value))
				{
					this.Onmonths_to_payChanging(value);
					this.SendPropertyChanging();
					this._months_to_pay = value;
					this.SendPropertyChanged("months_to_pay");
					this.Onmonths_to_payChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoanList_LoanInstallmentList", Storage="_LoanInstallmentLists", ThisKey="loan_id", OtherKey="loan_id")]
		public EntitySet<LoanInstallmentList> LoanInstallmentLists
		{
			get
			{
				return this._LoanInstallmentLists;
			}
			set
			{
				this._LoanInstallmentLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_LoanList", Storage="_UserList", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public UserList UserList
		{
			get
			{
				return this._UserList.Entity;
			}
			set
			{
				UserList previousValue = this._UserList.Entity;
				if (((previousValue != value) 
							|| (this._UserList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserList.Entity = null;
						previousValue.LoanLists.Remove(this);
					}
					this._UserList.Entity = value;
					if ((value != null))
					{
						value.LoanLists.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("UserList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LoanInstallmentLists(LoanInstallmentList entity)
		{
			this.SendPropertyChanging();
			entity.LoanList = this;
		}
		
		private void detach_LoanInstallmentLists(LoanInstallmentList entity)
		{
			this.SendPropertyChanging();
			entity.LoanList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProcessList")]
	public partial class ProcessList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _process_id;
		
		private int _process_type;
		
		private System.Nullable<int> _sending_wallet;
		
		private System.Nullable<int> _target_wallet;
		
		private decimal _amount;
		
		private System.Nullable<bool> _is_approved;
		
		private System.Nullable<bool> _is_deadlock;
		
		private System.Nullable<int> _process_owner;
		
		private System.Nullable<System.DateTime> _process_date;
		
		private EntityRef<ProcessTypeList> _ProcessTypeList;
		
		private EntityRef<UserList> _UserList;
		
		private EntityRef<WalletList> _WalletList;
		
		private EntityRef<WalletList> _WalletList1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onprocess_idChanging(int value);
    partial void Onprocess_idChanged();
    partial void Onprocess_typeChanging(int value);
    partial void Onprocess_typeChanged();
    partial void Onsending_walletChanging(System.Nullable<int> value);
    partial void Onsending_walletChanged();
    partial void Ontarget_walletChanging(System.Nullable<int> value);
    partial void Ontarget_walletChanged();
    partial void OnamountChanging(decimal value);
    partial void OnamountChanged();
    partial void Onis_approvedChanging(System.Nullable<bool> value);
    partial void Onis_approvedChanged();
    partial void Onis_deadlockChanging(System.Nullable<bool> value);
    partial void Onis_deadlockChanged();
    partial void Onprocess_ownerChanging(System.Nullable<int> value);
    partial void Onprocess_ownerChanged();
    partial void Onprocess_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onprocess_dateChanged();
    #endregion
		
		public ProcessList()
		{
			this._ProcessTypeList = default(EntityRef<ProcessTypeList>);
			this._UserList = default(EntityRef<UserList>);
			this._WalletList = default(EntityRef<WalletList>);
			this._WalletList1 = default(EntityRef<WalletList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int process_id
		{
			get
			{
				return this._process_id;
			}
			set
			{
				if ((this._process_id != value))
				{
					this.Onprocess_idChanging(value);
					this.SendPropertyChanging();
					this._process_id = value;
					this.SendPropertyChanged("process_id");
					this.Onprocess_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_type", DbType="Int NOT NULL")]
		public int process_type
		{
			get
			{
				return this._process_type;
			}
			set
			{
				if ((this._process_type != value))
				{
					if (this._ProcessTypeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprocess_typeChanging(value);
					this.SendPropertyChanging();
					this._process_type = value;
					this.SendPropertyChanged("process_type");
					this.Onprocess_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sending_wallet", DbType="Int")]
		public System.Nullable<int> sending_wallet
		{
			get
			{
				return this._sending_wallet;
			}
			set
			{
				if ((this._sending_wallet != value))
				{
					if (this._WalletList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsending_walletChanging(value);
					this.SendPropertyChanging();
					this._sending_wallet = value;
					this.SendPropertyChanged("sending_wallet");
					this.Onsending_walletChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_target_wallet", DbType="Int")]
		public System.Nullable<int> target_wallet
		{
			get
			{
				return this._target_wallet;
			}
			set
			{
				if ((this._target_wallet != value))
				{
					if (this._WalletList1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontarget_walletChanging(value);
					this.SendPropertyChanging();
					this._target_wallet = value;
					this.SendPropertyChanged("target_wallet");
					this.Ontarget_walletChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Money NOT NULL")]
		public decimal amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_approved", DbType="Bit")]
		public System.Nullable<bool> is_approved
		{
			get
			{
				return this._is_approved;
			}
			set
			{
				if ((this._is_approved != value))
				{
					this.Onis_approvedChanging(value);
					this.SendPropertyChanging();
					this._is_approved = value;
					this.SendPropertyChanged("is_approved");
					this.Onis_approvedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_deadlock", DbType="Bit")]
		public System.Nullable<bool> is_deadlock
		{
			get
			{
				return this._is_deadlock;
			}
			set
			{
				if ((this._is_deadlock != value))
				{
					this.Onis_deadlockChanging(value);
					this.SendPropertyChanging();
					this._is_deadlock = value;
					this.SendPropertyChanged("is_deadlock");
					this.Onis_deadlockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_owner", DbType="Int")]
		public System.Nullable<int> process_owner
		{
			get
			{
				return this._process_owner;
			}
			set
			{
				if ((this._process_owner != value))
				{
					if (this._UserList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onprocess_ownerChanging(value);
					this.SendPropertyChanging();
					this._process_owner = value;
					this.SendPropertyChanged("process_owner");
					this.Onprocess_ownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_date", DbType="Date")]
		public System.Nullable<System.DateTime> process_date
		{
			get
			{
				return this._process_date;
			}
			set
			{
				if ((this._process_date != value))
				{
					this.Onprocess_dateChanging(value);
					this.SendPropertyChanging();
					this._process_date = value;
					this.SendPropertyChanged("process_date");
					this.Onprocess_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessTypeList_ProcessList", Storage="_ProcessTypeList", ThisKey="process_type", OtherKey="process_type", IsForeignKey=true)]
		public ProcessTypeList ProcessTypeList
		{
			get
			{
				return this._ProcessTypeList.Entity;
			}
			set
			{
				ProcessTypeList previousValue = this._ProcessTypeList.Entity;
				if (((previousValue != value) 
							|| (this._ProcessTypeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProcessTypeList.Entity = null;
						previousValue.ProcessLists.Remove(this);
					}
					this._ProcessTypeList.Entity = value;
					if ((value != null))
					{
						value.ProcessLists.Add(this);
						this._process_type = value.process_type;
					}
					else
					{
						this._process_type = default(int);
					}
					this.SendPropertyChanged("ProcessTypeList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_ProcessList", Storage="_UserList", ThisKey="process_owner", OtherKey="user_id", IsForeignKey=true)]
		public UserList UserList
		{
			get
			{
				return this._UserList.Entity;
			}
			set
			{
				UserList previousValue = this._UserList.Entity;
				if (((previousValue != value) 
							|| (this._UserList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserList.Entity = null;
						previousValue.ProcessLists.Remove(this);
					}
					this._UserList.Entity = value;
					if ((value != null))
					{
						value.ProcessLists.Add(this);
						this._process_owner = value.user_id;
					}
					else
					{
						this._process_owner = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WalletList_ProcessList", Storage="_WalletList", ThisKey="sending_wallet", OtherKey="wallet_id", IsForeignKey=true)]
		public WalletList WalletList
		{
			get
			{
				return this._WalletList.Entity;
			}
			set
			{
				WalletList previousValue = this._WalletList.Entity;
				if (((previousValue != value) 
							|| (this._WalletList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WalletList.Entity = null;
						previousValue.ProcessLists.Remove(this);
					}
					this._WalletList.Entity = value;
					if ((value != null))
					{
						value.ProcessLists.Add(this);
						this._sending_wallet = value.wallet_id;
					}
					else
					{
						this._sending_wallet = default(Nullable<int>);
					}
					this.SendPropertyChanged("WalletList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WalletList_ProcessList1", Storage="_WalletList1", ThisKey="target_wallet", OtherKey="wallet_id", IsForeignKey=true)]
		public WalletList WalletList1
		{
			get
			{
				return this._WalletList1.Entity;
			}
			set
			{
				WalletList previousValue = this._WalletList1.Entity;
				if (((previousValue != value) 
							|| (this._WalletList1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WalletList1.Entity = null;
						previousValue.ProcessLists1.Remove(this);
					}
					this._WalletList1.Entity = value;
					if ((value != null))
					{
						value.ProcessLists1.Add(this);
						this._target_wallet = value.wallet_id;
					}
					else
					{
						this._target_wallet = default(Nullable<int>);
					}
					this.SendPropertyChanged("WalletList1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProcessTypeList")]
	public partial class ProcessTypeList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _process_type;
		
		private string _process_name;
		
		private EntitySet<ProcessList> _ProcessLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onprocess_typeChanging(int value);
    partial void Onprocess_typeChanged();
    partial void Onprocess_nameChanging(string value);
    partial void Onprocess_nameChanged();
    #endregion
		
		public ProcessTypeList()
		{
			this._ProcessLists = new EntitySet<ProcessList>(new Action<ProcessList>(this.attach_ProcessLists), new Action<ProcessList>(this.detach_ProcessLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_type", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int process_type
		{
			get
			{
				return this._process_type;
			}
			set
			{
				if ((this._process_type != value))
				{
					this.Onprocess_typeChanging(value);
					this.SendPropertyChanging();
					this._process_type = value;
					this.SendPropertyChanged("process_type");
					this.Onprocess_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_process_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string process_name
		{
			get
			{
				return this._process_name;
			}
			set
			{
				if ((this._process_name != value))
				{
					this.Onprocess_nameChanging(value);
					this.SendPropertyChanging();
					this._process_name = value;
					this.SendPropertyChanged("process_name");
					this.Onprocess_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProcessTypeList_ProcessList", Storage="_ProcessLists", ThisKey="process_type", OtherKey="process_type")]
		public EntitySet<ProcessList> ProcessLists
		{
			get
			{
				return this._ProcessLists;
			}
			set
			{
				this._ProcessLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessLists(ProcessList entity)
		{
			this.SendPropertyChanging();
			entity.ProcessTypeList = this;
		}
		
		private void detach_ProcessLists(ProcessList entity)
		{
			this.SendPropertyChanging();
			entity.ProcessTypeList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalariesList")]
	public partial class SalariesList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_type;
		
		private decimal _salary;
		
		private EntityRef<UserTypeList> _UserTypeList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_typeChanging(int value);
    partial void Onuser_typeChanged();
    partial void OnsalaryChanging(decimal value);
    partial void OnsalaryChanged();
    #endregion
		
		public SalariesList()
		{
			this._UserTypeList = default(EntityRef<UserTypeList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_type", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_type
		{
			get
			{
				return this._user_type;
			}
			set
			{
				if ((this._user_type != value))
				{
					if (this._UserTypeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_typeChanging(value);
					this.SendPropertyChanging();
					this._user_type = value;
					this.SendPropertyChanged("user_type");
					this.Onuser_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Money NOT NULL")]
		public decimal salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTypeList_SalariesList", Storage="_UserTypeList", ThisKey="user_type", OtherKey="user_type", IsForeignKey=true)]
		public UserTypeList UserTypeList
		{
			get
			{
				return this._UserTypeList.Entity;
			}
			set
			{
				UserTypeList previousValue = this._UserTypeList.Entity;
				if (((previousValue != value) 
							|| (this._UserTypeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTypeList.Entity = null;
						previousValue.SalariesList = null;
					}
					this._UserTypeList.Entity = value;
					if ((value != null))
					{
						value.SalariesList = this;
						this._user_type = value.user_type;
					}
					else
					{
						this._user_type = default(int);
					}
					this.SendPropertyChanged("UserTypeList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserList")]
	public partial class UserList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _username;
		
		private string _password;
		
		private int _user_type;
		
		private EntityRef<ContactInfoList> _ContactInfoList;
		
		private EntityRef<CustomerSharingList> _CustomerSharingList;
		
		private EntitySet<CustomerSharingList> _CustomerSharingLists;
		
		private EntitySet<LoanList> _LoanLists;
		
		private EntitySet<ProcessList> _ProcessLists;
		
		private EntitySet<WalletList> _WalletLists;
		
		private EntityRef<UserTypeList> _UserTypeList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onuser_typeChanging(int value);
    partial void Onuser_typeChanged();
    #endregion
		
		public UserList()
		{
			this._ContactInfoList = default(EntityRef<ContactInfoList>);
			this._CustomerSharingList = default(EntityRef<CustomerSharingList>);
			this._CustomerSharingLists = new EntitySet<CustomerSharingList>(new Action<CustomerSharingList>(this.attach_CustomerSharingLists), new Action<CustomerSharingList>(this.detach_CustomerSharingLists));
			this._LoanLists = new EntitySet<LoanList>(new Action<LoanList>(this.attach_LoanLists), new Action<LoanList>(this.detach_LoanLists));
			this._ProcessLists = new EntitySet<ProcessList>(new Action<ProcessList>(this.attach_ProcessLists), new Action<ProcessList>(this.detach_ProcessLists));
			this._WalletLists = new EntitySet<WalletList>(new Action<WalletList>(this.attach_WalletLists), new Action<WalletList>(this.detach_WalletLists));
			this._UserTypeList = default(EntityRef<UserTypeList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_type", DbType="Int NOT NULL")]
		public int user_type
		{
			get
			{
				return this._user_type;
			}
			set
			{
				if ((this._user_type != value))
				{
					if (this._UserTypeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_typeChanging(value);
					this.SendPropertyChanging();
					this._user_type = value;
					this.SendPropertyChanged("user_type");
					this.Onuser_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_ContactInfoList", Storage="_ContactInfoList", ThisKey="user_id", OtherKey="user_id", IsUnique=true, IsForeignKey=false)]
		public ContactInfoList ContactInfoList
		{
			get
			{
				return this._ContactInfoList.Entity;
			}
			set
			{
				ContactInfoList previousValue = this._ContactInfoList.Entity;
				if (((previousValue != value) 
							|| (this._ContactInfoList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactInfoList.Entity = null;
						previousValue.UserList = null;
					}
					this._ContactInfoList.Entity = value;
					if ((value != null))
					{
						value.UserList = this;
					}
					this.SendPropertyChanged("ContactInfoList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_CustomerSharingList", Storage="_CustomerSharingList", ThisKey="user_id", OtherKey="customer_id", IsUnique=true, IsForeignKey=false)]
		public CustomerSharingList CustomerSharingList
		{
			get
			{
				return this._CustomerSharingList.Entity;
			}
			set
			{
				CustomerSharingList previousValue = this._CustomerSharingList.Entity;
				if (((previousValue != value) 
							|| (this._CustomerSharingList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerSharingList.Entity = null;
						previousValue.UserList = null;
					}
					this._CustomerSharingList.Entity = value;
					if ((value != null))
					{
						value.UserList = this;
					}
					this.SendPropertyChanged("CustomerSharingList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_CustomerSharingList1", Storage="_CustomerSharingLists", ThisKey="user_id", OtherKey="representer_id")]
		public EntitySet<CustomerSharingList> CustomerSharingLists
		{
			get
			{
				return this._CustomerSharingLists;
			}
			set
			{
				this._CustomerSharingLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_LoanList", Storage="_LoanLists", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<LoanList> LoanLists
		{
			get
			{
				return this._LoanLists;
			}
			set
			{
				this._LoanLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_ProcessList", Storage="_ProcessLists", ThisKey="user_id", OtherKey="process_owner")]
		public EntitySet<ProcessList> ProcessLists
		{
			get
			{
				return this._ProcessLists;
			}
			set
			{
				this._ProcessLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_WalletList", Storage="_WalletLists", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<WalletList> WalletLists
		{
			get
			{
				return this._WalletLists;
			}
			set
			{
				this._WalletLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTypeList_UserList", Storage="_UserTypeList", ThisKey="user_type", OtherKey="user_type", IsForeignKey=true)]
		public UserTypeList UserTypeList
		{
			get
			{
				return this._UserTypeList.Entity;
			}
			set
			{
				UserTypeList previousValue = this._UserTypeList.Entity;
				if (((previousValue != value) 
							|| (this._UserTypeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTypeList.Entity = null;
						previousValue.UserLists.Remove(this);
					}
					this._UserTypeList.Entity = value;
					if ((value != null))
					{
						value.UserLists.Add(this);
						this._user_type = value.user_type;
					}
					else
					{
						this._user_type = default(int);
					}
					this.SendPropertyChanged("UserTypeList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerSharingLists(CustomerSharingList entity)
		{
			this.SendPropertyChanging();
			entity.UserList1 = this;
		}
		
		private void detach_CustomerSharingLists(CustomerSharingList entity)
		{
			this.SendPropertyChanging();
			entity.UserList1 = null;
		}
		
		private void attach_LoanLists(LoanList entity)
		{
			this.SendPropertyChanging();
			entity.UserList = this;
		}
		
		private void detach_LoanLists(LoanList entity)
		{
			this.SendPropertyChanging();
			entity.UserList = null;
		}
		
		private void attach_ProcessLists(ProcessList entity)
		{
			this.SendPropertyChanging();
			entity.UserList = this;
		}
		
		private void detach_ProcessLists(ProcessList entity)
		{
			this.SendPropertyChanging();
			entity.UserList = null;
		}
		
		private void attach_WalletLists(WalletList entity)
		{
			this.SendPropertyChanging();
			entity.UserList = this;
		}
		
		private void detach_WalletLists(WalletList entity)
		{
			this.SendPropertyChanging();
			entity.UserList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTypeList")]
	public partial class UserTypeList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_type;
		
		private string _user_type_name;
		
		private EntityRef<SalariesList> _SalariesList;
		
		private EntitySet<UserList> _UserLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_typeChanging(int value);
    partial void Onuser_typeChanged();
    partial void Onuser_type_nameChanging(string value);
    partial void Onuser_type_nameChanged();
    #endregion
		
		public UserTypeList()
		{
			this._SalariesList = default(EntityRef<SalariesList>);
			this._UserLists = new EntitySet<UserList>(new Action<UserList>(this.attach_UserLists), new Action<UserList>(this.detach_UserLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_type", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_type
		{
			get
			{
				return this._user_type;
			}
			set
			{
				if ((this._user_type != value))
				{
					this.Onuser_typeChanging(value);
					this.SendPropertyChanging();
					this._user_type = value;
					this.SendPropertyChanged("user_type");
					this.Onuser_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_type_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string user_type_name
		{
			get
			{
				return this._user_type_name;
			}
			set
			{
				if ((this._user_type_name != value))
				{
					this.Onuser_type_nameChanging(value);
					this.SendPropertyChanging();
					this._user_type_name = value;
					this.SendPropertyChanged("user_type_name");
					this.Onuser_type_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTypeList_SalariesList", Storage="_SalariesList", ThisKey="user_type", OtherKey="user_type", IsUnique=true, IsForeignKey=false)]
		public SalariesList SalariesList
		{
			get
			{
				return this._SalariesList.Entity;
			}
			set
			{
				SalariesList previousValue = this._SalariesList.Entity;
				if (((previousValue != value) 
							|| (this._SalariesList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalariesList.Entity = null;
						previousValue.UserTypeList = null;
					}
					this._SalariesList.Entity = value;
					if ((value != null))
					{
						value.UserTypeList = this;
					}
					this.SendPropertyChanged("SalariesList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTypeList_UserList", Storage="_UserLists", ThisKey="user_type", OtherKey="user_type")]
		public EntitySet<UserList> UserLists
		{
			get
			{
				return this._UserLists;
			}
			set
			{
				this._UserLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLists(UserList entity)
		{
			this.SendPropertyChanging();
			entity.UserTypeList = this;
		}
		
		private void detach_UserLists(UserList entity)
		{
			this.SendPropertyChanging();
			entity.UserTypeList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WalletList")]
	public partial class WalletList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _wallet_id;
		
		private int _user_id;
		
		private int _currency_id;
		
		private decimal _wallet_weight;
		
		private System.Nullable<bool> _accepts_transactions;
		
		private System.Nullable<bool> _is_active;
		
		private EntitySet<ProcessList> _ProcessLists;
		
		private EntitySet<ProcessList> _ProcessLists1;
		
		private EntityRef<CurrencyList> _CurrencyList;
		
		private EntityRef<UserList> _UserList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onwallet_idChanging(int value);
    partial void Onwallet_idChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Oncurrency_idChanging(int value);
    partial void Oncurrency_idChanged();
    partial void Onwallet_weightChanging(decimal value);
    partial void Onwallet_weightChanged();
    partial void Onaccepts_transactionsChanging(System.Nullable<bool> value);
    partial void Onaccepts_transactionsChanged();
    partial void Onis_activeChanging(System.Nullable<bool> value);
    partial void Onis_activeChanged();
    #endregion
		
		public WalletList()
		{
			this._ProcessLists = new EntitySet<ProcessList>(new Action<ProcessList>(this.attach_ProcessLists), new Action<ProcessList>(this.detach_ProcessLists));
			this._ProcessLists1 = new EntitySet<ProcessList>(new Action<ProcessList>(this.attach_ProcessLists1), new Action<ProcessList>(this.detach_ProcessLists1));
			this._CurrencyList = default(EntityRef<CurrencyList>);
			this._UserList = default(EntityRef<UserList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wallet_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int wallet_id
		{
			get
			{
				return this._wallet_id;
			}
			set
			{
				if ((this._wallet_id != value))
				{
					this.Onwallet_idChanging(value);
					this.SendPropertyChanging();
					this._wallet_id = value;
					this.SendPropertyChanged("wallet_id");
					this.Onwallet_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._UserList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currency_id", DbType="Int NOT NULL")]
		public int currency_id
		{
			get
			{
				return this._currency_id;
			}
			set
			{
				if ((this._currency_id != value))
				{
					if (this._CurrencyList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncurrency_idChanging(value);
					this.SendPropertyChanging();
					this._currency_id = value;
					this.SendPropertyChanged("currency_id");
					this.Oncurrency_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wallet_weight", DbType="Money NOT NULL")]
		public decimal wallet_weight
		{
			get
			{
				return this._wallet_weight;
			}
			set
			{
				if ((this._wallet_weight != value))
				{
					this.Onwallet_weightChanging(value);
					this.SendPropertyChanging();
					this._wallet_weight = value;
					this.SendPropertyChanged("wallet_weight");
					this.Onwallet_weightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accepts_transactions", DbType="Bit")]
		public System.Nullable<bool> accepts_transactions
		{
			get
			{
				return this._accepts_transactions;
			}
			set
			{
				if ((this._accepts_transactions != value))
				{
					this.Onaccepts_transactionsChanging(value);
					this.SendPropertyChanging();
					this._accepts_transactions = value;
					this.SendPropertyChanged("accepts_transactions");
					this.Onaccepts_transactionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_active", DbType="Bit")]
		public System.Nullable<bool> is_active
		{
			get
			{
				return this._is_active;
			}
			set
			{
				if ((this._is_active != value))
				{
					this.Onis_activeChanging(value);
					this.SendPropertyChanging();
					this._is_active = value;
					this.SendPropertyChanged("is_active");
					this.Onis_activeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WalletList_ProcessList", Storage="_ProcessLists", ThisKey="wallet_id", OtherKey="sending_wallet")]
		public EntitySet<ProcessList> ProcessLists
		{
			get
			{
				return this._ProcessLists;
			}
			set
			{
				this._ProcessLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WalletList_ProcessList1", Storage="_ProcessLists1", ThisKey="wallet_id", OtherKey="target_wallet")]
		public EntitySet<ProcessList> ProcessLists1
		{
			get
			{
				return this._ProcessLists1;
			}
			set
			{
				this._ProcessLists1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrencyList_WalletList", Storage="_CurrencyList", ThisKey="currency_id", OtherKey="currency_id", IsForeignKey=true)]
		public CurrencyList CurrencyList
		{
			get
			{
				return this._CurrencyList.Entity;
			}
			set
			{
				CurrencyList previousValue = this._CurrencyList.Entity;
				if (((previousValue != value) 
							|| (this._CurrencyList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrencyList.Entity = null;
						previousValue.WalletLists.Remove(this);
					}
					this._CurrencyList.Entity = value;
					if ((value != null))
					{
						value.WalletLists.Add(this);
						this._currency_id = value.currency_id;
					}
					else
					{
						this._currency_id = default(int);
					}
					this.SendPropertyChanged("CurrencyList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserList_WalletList", Storage="_UserList", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public UserList UserList
		{
			get
			{
				return this._UserList.Entity;
			}
			set
			{
				UserList previousValue = this._UserList.Entity;
				if (((previousValue != value) 
							|| (this._UserList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserList.Entity = null;
						previousValue.WalletLists.Remove(this);
					}
					this._UserList.Entity = value;
					if ((value != null))
					{
						value.WalletLists.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("UserList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProcessLists(ProcessList entity)
		{
			this.SendPropertyChanging();
			entity.WalletList = this;
		}
		
		private void detach_ProcessLists(ProcessList entity)
		{
			this.SendPropertyChanging();
			entity.WalletList = null;
		}
		
		private void attach_ProcessLists1(ProcessList entity)
		{
			this.SendPropertyChanging();
			entity.WalletList1 = this;
		}
		
		private void detach_ProcessLists1(ProcessList entity)
		{
			this.SendPropertyChanging();
			entity.WalletList1 = null;
		}
	}
}
#pragma warning restore 1591
